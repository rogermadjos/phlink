import java.awt.EventQueue;
import java.awt.Graphics;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.image.BufferedImage;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.GroupLayout;
import javax.swing.JFrame;
import javax.swing.JPanel;

public class MainFrame extends JFrame implements ActionListener {
    private JPanel contentPane;
    public final int FRAME_WIDTH = 640;
    public final int FRAME_HEIGHT = 480;
    
    private final Logger logger = Logger.getLogger(MainFrame.class.getName());
    private QRDecoder qrDecoder;
    private DisplayThread displayThread;
    private DecodeThread decodeThread;

    /**
    * Launch the application.
    */
    public static void main(String[] args) {
        EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    MainFrame frame = new MainFrame();
                    frame.setVisible(true);
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        });
    }

    /**
    * Create the frame.
    */
    public MainFrame() {
    	setTitle("phlink");
        setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        addWindowListener(new WindowListener() {
			
			@Override
			public void windowOpened(WindowEvent e) {
				logger.log(Level.INFO, "started");
			}
			
			@Override
			public void windowIconified(WindowEvent e) {
			}
			
			@Override
			public void windowDeiconified(WindowEvent e) {
			}
			
			@Override
			public void windowDeactivated(WindowEvent e) {
			}
			
			@Override
			public void windowClosing(WindowEvent e) {
			}
			
			@Override
			public void windowClosed(WindowEvent e) {
				logger.log(Level.INFO, "close");
				videoCap.release();
			}
			
			@Override
			public void windowActivated(WindowEvent e) {
			}
		});
        
        contentPane = new JPanel();
        contentPane.setLayout(null);
        
        GroupLayout layout = new GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setAutoCreateGaps(true);
        layout.setAutoCreateContainerGaps(true);

        layout.setHorizontalGroup(layout.createParallelGroup()
        	.addComponent(contentPane, FRAME_WIDTH, FRAME_WIDTH, FRAME_WIDTH)
        );
        
        layout.setVerticalGroup(layout.createSequentialGroup()
        	.addComponent(contentPane, FRAME_WIDTH, FRAME_WIDTH, FRAME_WIDTH)
        );
        
        pack();
        setLocationRelativeTo(null);
        
        qrDecoder = new QRDecoder(this);

        displayThread = new DisplayThread().start();
        decodeThread = new DecodeThread().start();
        
    }

    VideoCap videoCap = new VideoCap();
    BufferedImage imageFrame = null;
    
    private BufferedImage getFrame() {
    	return videoCap.getOneFrame();
    }

    public void paint(Graphics g){
    	g = contentPane.getGraphics();
    	imageFrame = getFrame();
    	g.drawImage(imageFrame, 0, 0, this);
    }

    class DisplayThread extends Thread {
        @Override
        public void run() {
            for (;;){
                repaint();
                try { Thread.sleep(20);
                } catch (InterruptedException e) {    }
            }  
        } 
    }
    
    class DecodeThread extends Thread {
        @Override
        public void run() {
            for (;;){
            	if (imageFrame != null) {
                	synchronized (imageFrame) {
                		qrDecoder.decodeQRCode(imageFrame);
    				}
            	}
                try { Thread.sleep(100);
                } catch (InterruptedException e) {    }
            }  
        } 
    }

	public void actionPerformed(ActionEvent e) {
		if (e.getActionCommand() == "QR_CODE") {
			logger.log(Level.INFO, qrDecoder.getData());
		}
	}

}